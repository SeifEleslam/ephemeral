// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum MessageType {
  TEXT 
  MEDIA 
}

// Define User model
model User {
  id        Int         @id @default(autoincrement())
  username  String      @unique
  email     String      @unique
  password  String
  chats     UserChats[]
  firstName String?
  lastName  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  Message   Message[]
}

model UserChats {
  userId Int
  chatId Int
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, chatId])
}

// Define Chat model
model Chat {
  id           Int         @id @default(autoincrement())
  participants UserChats[]
  messages     Message[]
  name         String? 
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
}

// Define Message model
model Message {
  id               Int         @id @default(autoincrement())
  content          String      @default("")
  type             MessageType
  sender           User        @relation(fields: [senderId], references: [id])
  chat             Chat        @relation(fields: [chatId], references: [id])
  chatId           Int
  senderId         Int
  isRead           Boolean 
  sentAt           DateTime    @default(now())
  encryptedContent String
  expirationAt     DateTime? 
  seenAt           DateTime? 
}
