// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// Define data types
enum MessageType {
  TEXT
  // Add more message types if needed (e.g., IMAGE, FILE)
}

// Define User model
model User {
  id       Int      @id @default(autoincrement())
  username String   @unique
  email    String   @unique @db.VarChar(255)
  password String   @db.VarChar(255)
  profile  Profile?

  Message  Message[]
  ChatUser ChatUser[]
}

// Define Chat model
model Chat {
  id       Int        @id @default(autoincrement())
  name     String?
  Message  Message[]
  ChatUser ChatUser[]
}

model ChatUser {
  id     Int @id @default(autoincrement())
  chatId Int
  userId Int
  // Add additional fields for the relationship (e.g., admin)

  chat Chat @relation(fields: [chatId], references: [id])
  user User @relation(fields: [userId], references: [id])

  // Define unique constraint to prevent duplicate entries
  @@unique(fields: [chatId, userId])
}

// Define Message model
model Message {
  id         Int         @id @default(autoincrement())
  content    String
  type       MessageType
  chatId     Int
  senderId   Int
  createdAt  DateTime    @default(now())
  expiration DateTime?
  encrypted  Boolean     @default(false)

  chat   Chat @relation(fields: [chatId], references: [id])
  sender User @relation(fields: [senderId], references: [id])
}
